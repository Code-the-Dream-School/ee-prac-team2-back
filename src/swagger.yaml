openapi: 3.0.0
info:
  title: date night
  contact: {}
  version: "1.0"
servers:
  - url: https://date-night-4gb5.onrender.com/
    variables: {}
paths:
  /api/v1/groups:
    get:
      tags:
        - Groups
      summary: Get All Groups
      description: Endpoint for viewing all the groups that the current user belongs to.
      operationId: GetAllGroups
      parameters:
        - name: memberType
          in: query
          required: false
          description: Filter events by membership type (owner for owned groups, member for non-owned groups, absent for all groups)
          schema:
            type: string
            enum:
              - owner
              - member
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
    post:
      tags:
        - Groups
      summary: Create Group
      description: Endpoint for creating a group
      operationId: CreateGroup
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateGroupRequest"
                - example:
                    groupName: "The Fellowship of the Ring"
                    description: "One does not simply walk into Mordor"
                    memberEmails:
                      [
                        "frodo@theshire.com",
                        "samwise@theshire.com",
                        "merry@theshire.com",
                        "foolofatook@theshire.com",
                        "legolas@mirkwood.com",
                        "gimli@sonofgloin.com",
                        "boromir@gondor.com",
                        "aragorn@dunedin.com",
                      ]
            example:
              groupName: "Stark Family"
              description: "Winter is coming"
              memberEmails:
                [
                  "catelyn@winterfell.com",
                  "robb@winterfell.com",
                  "sansa@winterfell.com",
                  "arya@winterfell.com",
                  "bran@winterfell.com",
                  "rickon@winterfell.com",
                ]
        required: true
      responses:
        "201":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/groups/{groupID}:
    parameters:
      - in: path
        name: groupID
        schema:
          type: string
        required: true
        description: The group resource id
    get:
      tags:
        - Groups
      summary: Get Group
      description: Endpoint for viewing a single group.
      operationId: GetGroup
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
    patch:
      tags:
        - Groups
      summary: Update Group
      description: Endpoint for updating a group. Group ID must be provided as a URL param!
      operationId: UpdateGroup
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UpdateGroupRequest"
                - example:
                    groupName: "Living Starks"
                    description: "Spoiler Alert"
                    memberEmails:
                      [
                        "sansa@winterfell.com",
                        "KING.BRAN@kingslanding.com",
                        "arya@westofwesteros.com",
                      ]
            example:
              groupName: "Living Starks"
              description: "Spoiler Alert"
              memberEmails:
                [
                  "sansa@winterfell.com",
                  "KING.BRAN@kingslanding.com",
                  "arya@westofwesteros.com",
                ]
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
    delete:
      tags:
        - Groups
      summary: Delete Group
      description: Endpoint for deleting a group.
      operationId: DeleteGroup
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/events:
    get:
      tags:
        - Events
      summary: Get All Events
      description: Endpoint for viewing all the events.
      operationId: GetAllEvents
      parameters:
        - name: host
          in: query
          required: false
          description: Filter events by host (true for host events, false or absent for all events)
          schema:
            type: boolean
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
    post:
      tags:
        - Events
      summary: Create Event
      description: Endpoint for creating an event
      operationId: CreateEvent
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateEventRequest"
                - example:
                    groupID: "6574d1d586b39da9fc3cb27b"
                    name: "Game Night"
                    eventDateTime: "2023-12-25T19:50:45.384+00:00"
                    activities:
                      - activity: "2 hours of volleyball"
                        type: "sports"
                      - activity: "5 Games of rapid Chess"
                        type: "competitive"
            example:
              groupID: "6574d1d586b39da9fc3cb27b"
              name: "Game Night"
              eventDateTime: "2023-12-25T19:50:45.384+00:00"
              activities:
                - activity: "2 hours of volleyball"
                  type: "sports"
                - activity: "5 Games of rapid Chess"
                  type: "competitive"
        required: true
      responses:
        "201":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/events/{eventID}:
    parameters:
      - in: path
        name: eventID
        schema:
          type: string
        required: true
        description: The event resource id
    get:
      tags:
        - Events
      summary: Get Event
      description: Endpoint for viewing a single event.
      operationId: GetEvent
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
    delete:
      tags:
        - Events
      summary: Delete Event
      description: Endpoint for deleting an event. Using this route will not only delete the event, but also cascade (remove) all of the event's linked activities!
      operationId: DeleteEvent
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/events/activities/{eventID}:
    parameters:
      - in: path
        name: eventID
        schema:
          type: string
        required: true
        description: The event resource id
    get:
      tags:
        - Events
      summary: Get Event's All Activities
      description: Endpoint for viewing just the activities of an event
      operationId: GetAllEventActivities
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/activities:
    get:
      tags:
        - Activities
      summary: Get All Activities
      description: Endpoint for viewing all the activities. This endpoint returns a combination of activities, a total of 6 randomzied activity documents (3 from bored API and 3 from hard coded activities) will be returned.
      operationId: GetAllActivities
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
    post:
      tags:
        - Activities
      summary: Create Activity
      description: Endpoint for creating an activity
      operationId: CreateActivity
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateActivityRequest"
                - example:
                    activity: A volleyball tournament event
                    type: sports.
            example:
              activity: A volleyball tournament event
              type: sports.
        required: true
      responses:
        "201":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/activities/{activityID}:
    parameters:
      - in: path
        name: activityID
        schema:
          type: string
        required: true
        description: The activity resource id
    get:
      tags:
        - Activities
      summary: Get Activity
      description: Endpoint for fetching a single activity. Activity ID must be provided as a URL param!
      operationId: GetActivity
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
    delete:
      tags:
        - Activities
      summary: Delete Event Activity
      description: Endpoint for deleting an event activity. Activity ID must be provided as a URL param!
      operationId: DeleteEventActivity
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
    put:
      tags:
        - Activities
      summary: Update Event Activity
      description: Endpoint for updating an event activity. Activity ID must be provided as a URL param!
      operationId: UpdateEventActivity
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UpdateActivityRequest"
                - example:
                    name: Hiking
                    category: relaxing
            example:
              name: Hiking
              category: relaxing
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/activities/{activityID}/votes:
    parameters:
      - in: path
        name: activityID
        schema:
          type: string
        required: true
        description: The activity resource id
    put:
      tags:
        - Activities
      summary: Update Event Activity Vote
      description: Endpoint for updating (increase/decrease) vote count of an event activity. A signed in user is required in order to access this route!
      operationId: UpdateEventActivityVote
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security: []
  /api/v1/auth/signup:
    post:
      tags:
        - Auth
      summary: Signup User
      description: Endpoint for creating a new user (signup). After a successful signup a json web token stored in a HTTP only cookie is sent to the client. This token contains the signed in user's ID as its payload, and is used for authorization/verification in the server. The cookie is automatically sent to the server on every subsequent request.
      operationId: SignupUser
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/SignupUserRequest"
                - example:
                    name: Morez
                    email: example@email.com
                    password: strongPass123
            example:
              name: Morez
              email: example@email.com
              password: strongPass123
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/auth/login:
    post:
      tags:
        - Auth
      summary: Login User
      description: Endpoint for creating a new json web token with the verified user's id as its payload stored in a HTTP only cookie which gets stored in the client side machine. The cookie is automatically sent to the server on every subsequent request.
      operationId: LoginUser
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/LoginUserRequest"
                - example:
                    email: example@email.com
                    password: strongPass123
            example:
              email: example@email.com
              password: strongPass123
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/auth/logout:
    post:
      tags:
        - Auth
      summary: Logout User
      description: Endpoint for creating a new json web token with the verified user's id as its payload stored in a HTTP only cookie which gets stored in the client side machine. The cookie is automatically sent to the server on every subsequent request.
      operationId: LogoutUser
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
  /api/v1/auth/getCurrentUser:
    get:
      tags:
        - Auth
      summary: Get Current User
      description: >-
        Returns authenticated user's information
        An authenticated user's token required
      operationId: GetCurrentUser
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
components:
  schemas:
    CreateGroupRequest:
      title: CreateGroupRequest
      required:
        - groupName
        - description
        - memberEmails
      type: object
      properties:
        groupName:
          type: string
          description: The name of the group.
        description:
          type: string
          description: A brief description of the group.
        memberEmails:
          type: array
          description: A list of email addresses for the group members.
          items:
            type: string
            format: email
      example:
        groupName: "Stark Family"
        description: "Winter is coming"
        memberEmails:
          [
            "catelyn@winterfell.com",
            "robb@winterfell.com",
            "sansa@winterfell.com",
            "arya@winterfell.com",
            "bran@winterfell.com",
            "rickon@winterfell.com",
          ]
    UpdateGroupRequest:
      title: UpdateGroupRequest
      required:
        - groupName
        - description
        - memberEmails
      type: object
      properties:
        groupName:
          type: string
          description: The name of the group.
        description:
          type: string
          description: A brief description of the group.
        memberEmails:
          type: array
          description: A list of email addresses for the group members.
          items:
            type: string
            format: email
      example:
        groupName: "Living Starks"
        description: "Spoiler Alert"
        memberEmails:
          [
            "sansa@winterfell.com",
            "KING.BRAN@kingslanding.com",
            "arya@westofwesteros.com",
          ]
    CreateEventRequest:
      title: CreateEventRequest
      required:
        - groupID
        - name
        - eventDateTime
        - activities
      type: object
      properties:
        groupID:
          type: string
        name:
          type: string
        description:
          type: string
        eventDateTime:
          type: string
        activities:
          type: array
          items:
            type: object
            properties:
              activity:
                type: string
                description: Description of the activity.
              type:
                type: string
                enum:
                  ["sports", "competitive", "social", "educational", "other"]
                description: Type of the activity.
      example:
        groupID: 6574d1d586b39da9fc3cb27b
        name: Soccer Day
        description: A sports tournament event.
    CreateActivityRequest:
      title: CreateActivityRequest
      required:
        - eventID
        - activity
        - type
      type: object
      properties:
        activity:
          type: string
        type:
          type: string
      example:
        activity: A volleyball tournament event
        type: sports.
    UpdateActivityRequest:
      title: UpdateActivityRequest
      required:
        - activity
        - type
      type: object
      properties:
        activity:
          type: string
        type:
          type: string
      example:
        activity: Hiking
        type: relaxing
    SignupUserRequest:
      title: SignupUserRequest
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: Morez
        email: example@email.com
        password: strongPass123
    LoginUserRequest:
      title: LoginUserRequest
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: example@email.com
        password: strongPass123
tags:
  - name: Auth
    description: ""
  - name: Groups
    description: ""
  - name: Events
    description: ""
  - name: Activities
    description: ""
